Parameters:
  NameOfService:
    Description: "The name of the service that this stack is to be used for"
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access into the server
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Description: Enter the VPC ID
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Description: Enter the Subnets
    Type: List<AWS::EC2::Subnet::Id>
Mappings:
    RegionMap:
      us-east-1:
        AMI: ami-1853ac65
      us-west-1:
        AMI: ami-bf5540df
      eu-west-1:
        AMI: ami-3bfab942
      ap-southeast-1:
        AMI: ami-e2adf99e
      ap-southeast-2:
        AMI: ami-43874721 # Amazon Linux AMI in Sydney
Resources:
  LoadBalancer: #Application Load Balancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: !Ref SubnetIds
  LoadBalancerListener: #Port 80 Listener for ALB
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        Port: 80
        Protocol: HTTP
        VpcId: !Ref VpcId
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 3
      MaxSize: 3
      TargetGroupARNs:
          - !Ref TargetGroup
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install php and httpd
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /var/www/html/index.php:
              content: !Sub |
                <?php print "Hello world Jake was here!"; ?>
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true     
    Properties:
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref MySecurityGroup
      ImageId: 
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - AMI
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            # ensure AWS CFN Bootstrap is the latest
            yum install -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Join [" ", [Open, Port, 80, only, for, website]]
  EC2InboundRule: # EC2 can only accept traffic from ALB    
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        !GetAtt
        - ALBSecurityGroup
        - GroupId
      GroupId:
        !GetAtt
        - MySecurityGroup
        - GroupId
Outputs:
  PublicDns:
    Description: The Public DNS for the LoadBalancer
    Value: !Sub http://${LoadBalancer.DNSName}