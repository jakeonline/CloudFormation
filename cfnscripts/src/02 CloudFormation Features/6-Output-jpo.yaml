Parameters:
  NameOfService:
    Description: "The name of the service that this stack is to be used for"
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access into the server
    Type: AWS::EC2::KeyPair::KeyName
Mappings:
    RegionMap:
      us-east-1:
        AMI: ami-1853ac65
      us-west-1:
        AMI: ami-bf5540df
      eu-west-1:
        AMI: ami-3bfab942
      ap-southeast-1:
        AMI: ami-e2adf99e
      ap-southeast-2:
        AMI: ami-43874721 # Amazon Linux AMI in Sydney
Resources:
  Ec2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: t2.micro
      ImageId: 
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - AMI
      SecurityGroups: 
        - !Ref MySecurityGroup
      Tags:
        - Key: "Name"
          Value: !Join 
            - ""
            - - "EC2 Instance for "
              - !Ref AWS::Region
              - " (via PseudoParameter AWS::Region)"
        - Key: Organisation
          Value: !Join [" ", [Odsinada, Tech, Consulting]]
        - Key: Topic
          Value: !Join [" ", [CloudFormation, Mappings]]
        - Key: Functionality
          Value: !Join [" ", [Input, Parameters]]
        - Key: Name Of Service
          Value: !Ref NameOfService
      KeyName: !Ref KeyName
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Join [" ", [Enable, SSH, access, via, port 22]]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
Outputs:
  ServerDns:
    Value: !GetAtt
      - Ec2Instance
      - PublicDnsName
  ServerIp:
    Value: !GetAtt
      - Ec2Instance
      - PublicIp